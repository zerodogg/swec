#!/usr/bin/perl
# runTests
# Copyright (C) Eskild Hustvedt 2009
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;

my $httpPid = fork;
if(not defined $httpPid)
{
	die('Failed to fork: '.$!);
}
if(not $httpPid)
{
	exec('./testServer') or die;
}

my %tests = (
	NOERRORS_SINGLE=> {
		succeed => 1,
		path => '/noerrors/single',
	},
	NOERRORS_BASIC => {
		succeed => 1,
		path => '/noerrors/basic',
	},
	NOERRORS_COMPLEX => {
		succeed => 1,
		path => '/noerrors/complex',
	},
	NOERRORS_COMPLEX_ERRORSEED => {
		succeed => 0,
		path => '/noerrors/complex',
		params => [ qw(-s /errors/complex) ],
	},
	NOERRORS_COMPLEX_SEEDMATCH => {
		succeed => 1,
		path => '/noerrors/complex',
		params => [ qw(-s /errors/basic -m basic=0) ],
	},
	ERRORS_SINGLE=> {
		succeed => 0,
		path => '/errors/single',
	},
	ERRORS_BASIC => {
		succeed => 0,
		path => '/errors/basic',
	},
	ERRORS_COMPLEX => {
		succeed => 0,
		path => '/errors/complex',
	},
	ERRORS_COMPLEX_NOHEAD => {
		succeed => 0,
		path => '/errors/complex',
		params => [ qw(--nohead) ],
	},
	ERRORS_COMPLEX_KEEPGOING => {
		succeed => 0,
		path => '/errors/complex',
		params => [ qw(--keepgoing) ],
	},
	ERRORS_COMPLEX_NOCHECKS => {
		succeed => 1,
		path => '/errors/complex',
		params => [ qw(-m .=0) ],
	},
	ERRORS_COMPLEX_ERRFILTER => {
		succeed => 1,
		path => '/errors/complex',
		params => [ qw(-m test=0 -m html=0) ],
	},
	HTTPD_404 => {
		succeed => 0,
		path => '/nonexisting/404/path',
		params => [ qw(-s /noerrors/complex --keepgoing) ],
	},
);

$| = 1;
my $exit = 0;
my $ran = 0;
my $errors = 0;
my @failed;

print "Running tests: ";
foreach my $test (sort keys %tests)
{
	$ran++;
	my $i = $tests{$test};
	my @cmd = ('../swec','-x','SWEC_FILE_LENGTH');
	if ($i->{params})
	{
		push(@cmd,@{$i->{params}});
	}
	push(@cmd,'http://127.0.0.1:8123'.$i->{path});
	my $r = silentSystem(@cmd);

	if (not $i->{succeed})
	{
		$r = $r ? 0 : 1;
	}

	if ($r == 0)
	{
		print '+';
	}
	else
	{
		print '-';
		push(@failed,{ cmd => join(' ',@cmd),
				test => $test,
			});
		$errors++;
	}

}
print "\n";
kill('TERM',$httpPid);
print "\n";
if ($errors)
{
	print "$errors/$ran tests failed\n";
	foreach my $fail (@failed)
	{
		print "The test $fail->{test} failed\n";
		print " It ran: $fail->{cmd}\n";
		if ($tests{$fail->{test}}->{succeed})
		{
			print " It expected the command to succeed - it failed.\n";
		}
		else
		{
			print " It expected the command to fail - it succeeded.\n";
		}
	}
}
else
{
	print "All tests succeeded\n";
}
exit($exit);

sub silentSystem
{
	open(my $SAVED_STDOUT, '>&',\*STDOUT);
	open(my $SAVED_STDERR, '>&',\*STDOUT);
	open(STDOUT,'>','/dev/null');
	open(STDERR,'>','/dev/null');
	my $ret = system(@_);
	open(STDOUT,'>&',$SAVED_STDOUT);
	open(STDERR,'>&',$SAVED_STDERR);
	return $ret;

}
